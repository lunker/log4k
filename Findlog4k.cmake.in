# - Try to find LOG4K library

#=============================================================================
# Copyright 2014 Kurento
#
#=============================================================================

set(PACKAGE_VERSION "@PROJECT_VERSION@")
set(LOG4K_VERSION ${PACKAGE_VERSION})

find_path(LOG4K_INCLUDE_DIR
  NAMES
    @FIND_HEADERS@
  PATH_SUFFIXES
    @CUSTOM_PREFIX@
  HINTS
    @CUSTOM_HINTS@
)
message("LOG4K_INCLUDE_DIR: ${LOG4K_INCLUDE_DIR}")

# set (LOG4K_BINARY_DIR_PREFIX "build" CACHE PATH "Path prefix used to look for binary files")

set(LOG4K_INCLUDE_DIRS ${LOG4K_INCLUDE_DIR}
  CACHE INTERNAL "Include directories for LOG4K library" FORCE
)

if (TARGET LOG4K)
  #Just get the target for the library
  set (LOG4K_LIBRARY LOG4K)
else ()
	find_library (LOG4K_LIBRARY
		NAMES
			log4k
		PATH_SUFFIXES
			${CMAKE_INSTALL_PREFIX}/lib
		HINTS
			${CMAKE_INSTALL_PREFIX}/lib
	)
endif ()

set (LOG4K_LIBRARIES ${LOG4K_LIBRARY}
  CACHE INTERNAL "Libraries for LOG4K" FORCE
)


set (REQUIRED_LIBS "@REQUIRED_LIBS@")
foreach (LIB ${REQUIRED_LIBS})
  string(FIND ${LIB} " " POS)

  if (${POS} GREATER 0)
    string (SUBSTRING ${LIB} 0 ${POS} LIB_NAME)
    string (SUBSTRING ${LIB} ${POS} -1 LIB_VERSION)
    string (STRIP ${LIB_NAME} LIB_NAME)
    string (STRIP ${LIB_VERSION} LIB_VERSION)
    generic_find (LIBNAME ${LIB_NAME} REQUIRED VERSION "${LIB_VERSION}")
  else ()
    generic_find (LIBNAME ${LIB_NAME} REQUIRED)
  endif ()
  list (APPEND REQUIRED_LIBRARIES ${${LIB_NAME}_LIBRARIES})
  list (APPEND REQUIRED_INCLUDE_DIRS ${${LIB_NAME}_INCLUDE_DIRS})

endforeach()

include (FindPackageHandleStandardArgs)

find_package_handle_standard_args(LOG4K
  FOUND_VAR
    LOG4K_FOUND
  REQUIRED_VARS
    LOG4K_VERSION
    LOG4K_INCLUDE_DIR
    LOG4K_INCLUDE_DIRS
    LOG4K_LIBRARY
    LOG4K_LIBRARIES
  VERSION_VAR
    LOG4K_VERSION
)

mark_as_advanced(
  LOG4K_FOUND
  LOG4K_VERSION
  LOG4K_INCLUDE_DIR
  LOG4K_INCLUDE_DIRS
  LOG4K_LIBRARY
  LOG4K_LIBRARIES
)
